
#
# Freifunk Karlsruhe
# NAT and ebtables Rules
#


@def $VZFFNRMO_NAT_IP = 185.65.241.22;
@def $VZFFNRMO_IF = (

enp1s0

);


domain (ip){
 table filter {
        chain FORWARD {
            mod state state (ESTABLISHED RELATED) ACCEPT;
         }
	   }
		 table mangle {
	        chain FORWARD {
					# mss = transport mtu - (batman-adv + ether) 32 - ipv4 20 - tcp 20
					{% for domain in salt['pillar.get']('domains', {}).values() %}
          {% set ifname_br = salt['domain_networking.generate_ifname'](domain, 'br') -%}
              interface {{ ifname_br }} outerface $VZFFNRMO_IF proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss {{ domain['network_mtu'] - 32 - 20 - 20 }};
					{% endfor %}
	        }
	   }
}


domain ip6 {
   table mangle {
        chain FORWARD {
            # mss = transport mtu - (batman-adv + ether) 32 - ipv6 40 - tcp 20
						{% for domain in salt['pillar.get']('domains', {}).values() %}
            {% set ifname_br = salt['domain_networking.generate_ifname'](domain, 'br') -%}
            interface {{ ifname_br }} outerface $VZFFNRMO_IF proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss {{ domain['network_mtu'] - 32 - 40 - 20 }};
						{% endfor %}
        }
   }
   table filter {
        chain FORWARD {
					{% for domain in salt['pillar.get']('domains', {}).values() %}
          {% set ifname_br = salt['domain_networking.generate_ifname'](domain, 'br') -%}
              interface $VZFFNRMO_IF outerface {{ ifname_br }} ACCEPT;
					{% endfor %}
        }
   }
}


domain ip table nat {


	chain POSTROUTING {
  {% for domain_id, domain in salt['pillar.get']('domains', {}).items() %}
{% for network in domain.get('ipv4', {}).values() if 'address' in network %}
		source {{ network['address'] }}/{{ network['netmask'] }} outerface $VZFFNRMO_IF SNAT to $VZFFNRMO_NAT_IP;

  {% endfor %}
  {% endfor %}

	}
}
