{%- set vrf = salt['pillar.get']('network:vrf:' ~ salt['pillar.get']('fastd:domains:bind_vrf'), False) %}
interface "peer-%k";

bind {{ vrf['lo']['ipv4'] }}:{{ fastd['port'] }};
bind [{{ vrf['lo']['ipv6'] }}]:{{ fastd['port'] }};

mtu {{ domain['fastd']['mtu'] }};

method "salsa2012+umac";
method "null@l2tp";
persist interface no;
mode multitap;
offload l2tp yes;


secure handshakes yes;

status socket "/run/fastd.{{ fastd_ifname }}.sock";

on up async "/etc/fastd/hooks/up {{ fastd_ifname }}-peers";
on down async "/etc/fastd/hooks/down";

secret "{{ salt['pillar.get']('fastd:domains:secret') }}";

{% if salt['pillar.get']('access_control:enabled') %}
# Use access-control
on verify "/usr/src/zutrittskontrolle/verify.py --host {{ salt['pillar.get']('access_control:url') }} --community {{ salt['pillar.get']('community') }}";
{% else %}
# blacklisting, everybody else will be accepted
on verify "/etc/fastd/fastdbl/fastd-blacklist.sh $PEER_KEY";
{% endif %}

log to syslog as "{{ fastd_ifname }}" level debug;
hide mac addresses yes;
hide ip addresses yes;