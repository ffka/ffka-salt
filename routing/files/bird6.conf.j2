router id {{ network.lo_ffka.ipv4.ip }};

protocol kernel {
  scan time 10;
  # import none;
  export all;
  kernel table 16;
}

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 10;           # Scan interfaces every 10 seconds
}

function is_default() {
  return net ~ [ ::/0 ];
}

function is_global() {
  return net ~ [ 2000::/3+ ];
}

function is_self_public() {
  return net ~ [ {{ ffka.v6_ffrl }}+ ];
}

function is_self_public_uplink() {
  if net ~ [ {{ ffka.v6_ffrl }} ] then accept;
  if net ~ [ {{ ffka.v6_ffrl }}{48,64} ] then {
    if source = RTS_STATIC then accept;
    if source = RTS_DEVICE then accept;
    if source = RTS_STATIC_DEVICE then accept;
  }
  reject;
}

function is_self() {
  return net ~ [ {{ network.lo_ffka.ipv6.ip }}/128 ];
}

function is_ffka_lo() {
  return net ~ [ {{ ffka.v6_ffrl }}{128,128} ];
}

protocol direct {
  interface "tun-*";
  interface "lo";
  interface "br_ffka";
}

protocol static static_nat64 {
 route {{ network.nat64.v6_range }} via "nat64";
};


protocol static static_bgp {
  route {{ ffka.v6_ffrl }} unreachable;
  # route 2a03:2260:a:64::/64 unreachable;
};

protocol static dhcp6_PD {
  route {{ dhcp.ipv6_pd_range }} via "br_ffka";
};

protocol ospf IGP {
  import where is_ffka_lo();
  export where is_self();


  area 0.0.0.0 {
    {%- for gre in salt['pillar.get']('network:gre_ffka:tunnel') %}
    interface "tun-{{gre.name}}";
    {%- endfor %}
    interface "br_ffka" { stub yes; };
    interface "lo";
  };
}

template bgp internal {
  local as {{ ffka.ffka_as }};
  import all;
  export all;
  next hop self;
  default bgp_local_pref 200;
};

{% for gre in salt['pillar.get']('network:gre_ffka:tunnel') %}
protocol bgp ffka_{{ gre.name }} from internal {
  source address {{ network.lo_ffka.ipv6.ip }};
  neighbor {{ gre.ffrl_ipv6 }} as {{ ffka.ffka_as }};
};
{% endfor %}

template bgp uplink {
  local as {{ ffka.ffka_as }};
  import where is_default();
  #   export where proto = "static_bgp";
  export where is_self_public_uplink();
  next hop self;
  gateway direct;
  #       password "idkfa";
  default bgp_local_pref 1000;
};

{% for gre in salt['pillar.get']('network:gre_ffrl:tunnel') %}
protocol bgp ffrl_{{gre.name}} from uplink {
	neighbor {{ gre.v6_remote }} as 201701;
{% if gre.password | to_bool %}
       password "idkfa";
{% endif %}
};
{% endfor %}

include "/etc/bird/bird.d/*";
