protocol kernel {
  kernel table 16;
  scan time 60;
	device routes;
# import none;
  export filter {
  	krt_prefsrc = {{ network.lo_ffka.ipv4.ip }};
  	accept;
  };
}

function is_default() {
        return (net ~ [0.0.0.0/0]);
};

function is_self_net() {
	return net ~ [ {{ salt['pillar.get']('ffka:v4_ff') }}+ ];
}

function is_self_public_uplink() {
	if net ~ [ {{ ffka.v4_ffrl }} ] then accept;
	if net ~ [ {{ ffka.v4_ffrl }}{29,32} ] then {
		if source = RTS_STATIC then accept;
		if source = RTS_DEVICE then accept;
		if source = RTS_STATIC_DEVICE then accept;
	}
	reject;
 }

filter hostroute {
  if net ~ {{ ffka.v4_ffrl }} then accept;
  reject;
};

protocol static static_nat64 {
    route {{ network.nat64.v4_pool }} via "nat64";
};

protocol direct {
  interface "tun-*";
  interface "lo";
	interface "br_*";
}

protocol static static_bgp {
	route {{ ffka.v4_ffrl }} unreachable;
	{% if network.cloud_uplink | to_bool %}
  route 185.66.194.15/32 via 185.66.194.12;
  {% endif %}
};

protocol ospf IGP {
	import all;
	export where is_self_public_uplink();

	area 0.0.0.0 {
		{%- for gre in salt['pillar.get']('network:gre_ffka:tunnel') %}
		interface "tun-{{gre.name}}";
		{%- endfor %}
    interface "br_*"{
			stub yes;
		};
		interface "lo";
	};
}

template bgp internal {
	local as {{ffka.as}};
#?	direct;
#	next hop self;
  import filter {
	  preference = 99;
	  accept;
	};
  export where source = RTS_BGP;
# gateway direct;
  next hop self;
};

{% for gre in salt['pillar.get']('network:gre_ffka:tunnel') %}
protocol bgp ffka_{{gre.name}} from internal {
  source address {{ network.lo_ffka.ipv4.ip }};
  neighbor {{gre.ffrl_ipv4}} as {{ffka.as}};
};
{% endfor %}

template bgp uplink {
  local as {{ffka.as}};
  import where is_default();
#	export where proto = "static_bgp";
  export where is_self_public_uplink();
  next hop self;
#	password "idkfa";
  default bgp_local_pref 200;
  gateway direct;
};

{% for gre in salt['pillar.get']('network:gre_ffrl:tunnel') %}
protocol bgp ffrl_{{gre.name}} from uplink {
	source address {{ gre.local }};
	neighbor {{ gre.remote }} as 201701;
	{% if gre.password | to_bool %}
	       password "idkfa";
	{% endif %}
};
{% endfor %}
