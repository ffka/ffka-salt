router id {{ salt['pillar.get']('network:lo_ffka:ipv4:ip') }};

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD's
# routing tables with the OS kernel.
#protocol kernel {
#	scan time 60;
#	import all;
#	export all;   # Actually insert routes into the kernel routing table
#
#}

# The Device protocol is not a real routing protocol. It doesn't generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel.
protocol device {
	scan time 60;
}


protocol kernel {
       kernel table 16;         # Kernel table to synchronize with (default: main)
#       learn;                  # Learn all alien routes from the kernel
#       persist;                # Don't remove routes on bird shutdown
        scan time 60;           # Scan kernel routing table every 20 seconds
#       import none;            # Default is import all
    export filter {
        krt_prefsrc = {{ salt['pillar.get']('network:lo_ffka:ipv4:ip') }};
        accept;
    };
}

function is_default() {
        return (net ~ [0.0.0.0/0]);
};
function is_self_net()       { return net ~ [ {{ salt['pillar.get']('ffka:v4_ffka') }}+ ]; }
function is_self_public_uplink() {
	if net ~ [ {{ salt['pillar.get']('ffka:v4_ffrl') }} ] then accept;
	if net ~ [ {{ salt['pillar.get']('ffka:v4_ffrl') }}{29,32} ] then {
		if source = RTS_STATIC then accept;
		if source = RTS_DEVICE then accept;
		if source = RTS_STATIC_DEVICE then accept;
	}
	reject;
 }

filter hostroute {
        if net ~ {{ salt['pillar.get']('ffka:v4_ffrl') }} then accept;
        reject;
};

#protocol static static_nat64 {
#        route 192.168.64.0/18 via "nat64";
#};


protocol direct {
        interface "tun-*";
        interface "lo";
	interface "br_ffka";
        }


protocol static static_bgp {
	route {{ salt['pillar.get']('ffka:v4_ffrl') }} unreachable;
};

protocol ospf IGP {
	import all;
	export where is_self_net();


	area 0.0.0.0 {
{% for gre in salt['pillar.get']('network:gre_ffka:tunnel') %}
		interface "tun-{{gre.name}}";
{% endfor %}
         interface "br_ffka"{
			stub yes;
		};
		interface "lo" {
		};
	};
}

template bgp internal {
        local as {{ffka.ffka_as}};
#?	direct;
#	next hop self;
        import filter {
                preference = 99;
                accept;
        };
        export where source = RTS_BGP;
#        gateway direct;
        next hop self;
};



protocol bgp alb1 from internal {
        source address 185.66.194.0;
        neighbor 185.66.194.9 as 65081;
};

protocol bgp alb2 from internal {
        source address 185.66.194.8;
        neighbor 185.66.194.10 as 65081;
};

protocol bgp alb3 from internal {
        #source address 185.66.194.8;
        neighbor 185.66.194.11 as 65081;
};

protocol bgp int_ent from internal {
        source address 185.66.194.8;
        neighbor 185.66.194.14 as 65081;
};


template bgp uplink {
        local as {{ffka.ffka_as}};
        import where is_default();
#	export where proto = "static_bgp";
        export where is_self_public_uplink();
        next hop self;
#	password "idkfa";
        default bgp_local_pref 200;
        gateway direct;
};


{% for gre in salt['pillar.get']('network:gre_ffrl:tunnel') %}
protocol bgp ffrl_{{gre.name}} from uplink {
        source address {{ gre.local }};
        neighbor {{ gre.remote }} as 201701;
};
{% endfor %}
