define {{ name | upper }}_ASN = {{ peer['rs_asn'] }};

{% for session_name, session in peer['sessions'].items() %}
protocol bgp {{ name | lower }}_{{ session_name }} from ebgp_{{ session['family'] }} {
    {{ session['family'] }} {
        import keep filtered;
        import filter {
            ebgp_in_ixp({{ name | upper }}_ASN, {{ session['session_id'] }}, CI_IXP_VALUE_{{ name | upper }}, CI_SCOPE_VALUE_{{ session['scope'] | upper }});
            ebgp_in_weight("route-server", {{ session.get('parameters', {}).get('local_pref', 0) }});
            accept;
        };
        export filter {
            ebgp_out_ixp();
            ebgp_out_weight({{ session.get('parameters', {}).get('prepend', 0) }});
            ebgp_out_community_cleanup();
            print "[{{ name | upper }}_{{ session_name }}] announcing ", net, " with path ", bgp_path;
            accept;
        };

        {% if 'prefix_limit' in session -%}
        import limit {{ session['prefix_limit'] }};
        {% endif %}
    };
    {% if 'password' in session -%}
    password "{{ session['password'] }}";
    {%- endif %}

    source address {{ session['source'] }};
    neighbor {{ session['neighbor'] }} as {{ name | upper }}_ASN;
};
{% endfor %}
