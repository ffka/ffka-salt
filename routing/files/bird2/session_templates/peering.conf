define {{ name | upper }}_ASN = {{ peer['asn'] }};

{%- for session_name, session in peer['sessions'].items() %}

filter import_as{{ peer['asn'] }}_{{ session_name }} {
    ebgp_in_peer_{{ session['family'] }}({{ name | upper }}_ASN, {{ session['session_id'] }}, CI_SCOPE_VALUE_{{ session['scope'] | upper }});
    ebgp_in_weight("peer", {{ session.get('parameters', {}).get('local_pref', 0) }});
    accept;  
}

filter export_as{{ peer['asn'] }}_{{ session_name }} {
    ebgp_out_peer_{{ session['family'] }}();
    ebgp_out_weight({{ session.get('parameters', {}).get('prepend', 0) }});
    ebgp_out_community_cleanup();
    print "[{{ name | upper }}_{{ session_name }}] announcing ", net, " with path ", bgp_path;
    accept;
}

protocol bgp {{ name | lower }}_{{ session_name }} from ebgp_{{ session['family'] }} {
    {% if session['family'] in ["ipv4", "dual"] %}
    ipv4 {
        import keep filtered;
        import filter import_as{{ peer['asn'] }}_{{ session_name }};
        export filter export_as{{ peer['asn'] }}_{{ session_name }};

        import limit {{ session['prefix_limit'] }};
    };
    {% endif -%}
    {% if session['family'] in ["ipv6", "dual"] %}
    ipv6 {
        import keep filtered;
        import filter import_as{{ peer['asn'] }}_{{ session_name }};
        export filter export_as{{ peer['asn'] }}_{{ session_name }};

        import limit {{ session['prefix_limit'] }};
    };
    {% endif -%}

    {% if 'password' in session -%}
    password "{{ session['password'] }}";
    {%- endif %}

    source address {{ session['source'] }};
    neighbor {{ session['neighbor'] }} as {{ name | upper }}_ASN;
};
{% endfor %}