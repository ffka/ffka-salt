# imports device routes of "internal downstreams"
{%- for af in ['4', '6'] %}
{% set af_long = 'ipv' ~ af %}
{{ af_long }} table internal_downstreams{{ af }};

protocol direct internal_downstreams_v{{ af }} {
    {{ af_long }} {
        table internal_downstreams{{ af }};
    };

    {% for settings in salt['pillar.get']('routing:internal_downstream', {}).values() if "interface" in settings %}
    interface "{{ settings['interface'] }}";
    {% endfor %}
}

protocol pipe internal_downstreams_v{{ af }}_pipe {
    table internal_downstreams{{ af }};
    peer table main{{ af }};
    export filter {
        # Routes imported in internal_downstreams_v{{ af }} are transfer networks
        # between core routers and internal downstreams. Internal downstreams should
        # be reachable by their transfer network ips (they might not have other ips).
        # If we do not tag them with ibgp_in_tag_route_type() during import, other
        # ibgp peers would receive the directly imported route (from protocol 
        # internal_downstreams_v{{ af }}) without any communities and hence drop the
        # route on import. => routes from internal_downstreams_v{{ af }} are internal routes.
        ibgp_in_tag_route_type();
        accept;
    };
    import none;
}
{% endfor %}

# add default route which is announced to the internal downstreams
protocol static internal_downstreams_default_v4 {
    ipv4 {
        table main4;
    };

    route 0.0.0.0/0 unreachable;
}

protocol static internal_downstreams_default_v6 {
    ipv6 {
        table main6;
    };

    route ::/0 unreachable;
}
