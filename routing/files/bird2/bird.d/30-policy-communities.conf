### Community Handling

function ebgp_in_community_cleanup() {
    bgp_large_community.delete([(LOCAL_AS, *, *)]);
}

function ebgp_in_community_cleanup_blackhole() {
    bgp_community.delete([CW_BLACKHOLE]);
}

function ebgp_in_tag_session_transit(int transit_asn) {
    bgp_large_community.add((LOCAL_AS, CI_TYPE, CI_TYPE_VALUE_TRANSIT));
    bgp_large_community.add((LOCAL_AS, CI_TRANSIT_ASN, transit_asn));
    bgp_large_community.add((LOCAL_AS, CI_ASN, transit_asn));
}

function ebgp_in_tag_session_peering(int peering_asn; int peering_type; int ixpid) {
    bgp_large_community.add((LOCAL_AS, CI_TYPE, CI_TYPE_VALUE_PEERING));
    bgp_large_community.add((LOCAL_AS, CI_PEERING_ASN, peering_asn));
    bgp_large_community.add((LOCAL_AS, CI_ASN, peering_asn));

    bgp_large_community.add((LOCAL_AS, CI_PEERING_TYPE, peering_type));

    if peering_type = CI_PEERING_TYPE_VALUE_IXP then {
        bgp_large_community.add((LOCAL_AS, CI_IXP, ixpid));
    }
}

function ebgp_in_tag_session_route_server(int ixpasn; int ixpid) {
    bgp_large_community.add((LOCAL_AS, CI_TYPE, CI_TYPE_VALUE_PEERING));

    bgp_large_community.add((LOCAL_AS, CI_PEERING_TYPE, CI_PEERING_TYPE_VALUE_IXP));
    bgp_large_community.add((LOCAL_AS, CI_IXP, ixpid));
    bgp_large_community.add((LOCAL_AS, CI_IXP_ASN, ixpasn));
    bgp_large_community.add((LOCAL_AS, CI_PEERING_ASN, ixpasn));
}

function ebgp_in_tag_session_customer(int customer_asn) {
    bgp_large_community.add((LOCAL_AS, CI_TYPE, CI_TYPE_VALUE_CUSTOMER));
    bgp_large_community.add((LOCAL_AS, CI_CUSTOMER_ASN, customer_asn));
    bgp_large_community.add((LOCAL_AS, CI_ASN, customer_asn));
}

function ebgp_in_tag_session_id(int session_id) {
    bgp_large_community.add((LOCAL_AS, CI_SESSION_ID, session_id));
}

function ebgp_in_tag_location(int location) {
    bgp_large_community.add((LOCAL_AS, CI_LOCATION, location));
}

function ebgp_in_tag_metro(int metro) {
    bgp_large_community.add((LOCAL_AS, CI_METRO, metro));
}

function ebgp_in_tag_scope(int scop) {
    bgp_large_community.add((LOCAL_AS, CI_SCOPE, scop));
}

function ebgp_out_community_cleanup() {
    bgp_large_community.delete([(LOCAL_AS, *, *)]);
}

function ebgp_out_tag_location(int location) {
    bgp_large_community.add((LOCAL_AS, CI_LOCATION, location));
}

function ebgp_out_tag_metro(int metro) {
    bgp_large_community.add((LOCAL_AS, CI_METRO, metro));
}

function ebgp_out_tag_scope(int scop) {
    bgp_large_community.add((LOCAL_AS, CI_SCOPE, scop));
}

function ebgp_out_tag_originate() {
    bgp_large_community.add((LOCAL_AS, CA_ORIGINATE, CA_ORIGINATE_VALUE_ORIGINATE));
}

function ibgp_in_tag_route_type() {
    bgp_large_community.add((LOCAL_AS, CI_TYPE, CI_TYPE_VALUE_INTERNAL));
}

# Check if a route originates from the local location
function is_location_local() {
    if (LOCAL_AS, CI_LOCATION, LOCAL_LOCATION) ~ bgp_large_community then {
        return true;
    }

    return false;
}

# Check if a route originates from the local metro
function is_metro_local() {
    if (LOCAL_AS, CI_METRO, LOCAL_METRO) ~ bgp_large_community then {
        return true;
    }

    return false;
}
