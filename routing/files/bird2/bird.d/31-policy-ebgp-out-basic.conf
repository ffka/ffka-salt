# Reject routes that are not markes as originated
function ebgp_out_check_originate() {
    if !((LOCAL_AS, CA_ORIGINATE, CA_ORIGINATE_VALUE_ORIGINATE) ~ bgp_large_community) then {
        reject;
    }
}

# Reject routes that don't pass basic plausibility checks
function ebgp_out_filter_implausible() {
    if !(net ~ [0.0.0.0/0{0, 24}, ::/0{0, 48}]) then {
        reject;
    }
}

# reject bogons ASNs and prefixes
function ebgp_out_filter_bogons() {
    if (net ~ BOGON_PREFIXES) then {
        print "Reject: bogon prefix: ", net;
        reject;
    }

    return 1;
}

function ebgp_out_check_rt_source() {
    if source != RTS_STATIC && source != RTS_BGP then {
     	print "Reject: invalid rt source: ", net;
    	reject;
    }
}

function ebgp_out_check_local_as() {
    if !(net ~ LOCAL_AS_PREFIXES) then {
        print "Reject: not in local as: ", net;
        reject;
    }

    # Needs adaptation for customers
    if !(bgp_path.len = 0 || bgp_path.first = LOCAL_AS) then {
        print "Reject: invalid first AS in path: ", bgp_path, " for ", net;
        reject;
    }
}

function ebgp_out_prepend(int i) {
    if i >= 1 then {
        bgp_path.prepend(LOCAL_AS);
    }
    if i >= 2 then {
        bgp_path.prepend(LOCAL_AS);
    }
    if i >= 3 then {
        bgp_path.prepend(LOCAL_AS);
    }
    if i >= 4 then {
        bgp_path.prepend(LOCAL_AS);
    }
    if i >= 5 then {
        bgp_path.prepend(LOCAL_AS);
    }

    if i > 5 then {
        print "Cannot prepend ", net, " more than 5 times, requested: ", i;
    }
}

function ebgp_out_med(int rmed)
{
    bgp_med = rmed;
}

function ebgp_out_weight(int w)
{
    # Assumption: only own prefixes from own AS announced -> set first AS to LOCAL_AS. checked in ebgp_out_check_local_as
    bgp_path.empty;
    bgp_path.prepend(LOCAL_AS);

    if (LOCAL_AS, CI_SCOPE, CI_SCOPE_VALUE_GLOBAL) ~ bgp_large_community then {
        # always announce routes of global scope
        ebgp_out_prepend(0 + w);
    } else if (LOCAL_AS, CI_SCOPE, CI_SCOPE_VALUE_LOCATION_LOCAL) ~ bgp_large_community then {
        # Check if route is local to location/metro
        if (LOCAL_AS, CI_LOCATION, LOCAL_LOCATION) ~ bgp_large_community then {
            ebgp_out_prepend(0 + w);
        } else if (LOCAL_AS, CI_METRO, LOCAL_METRO) ~ bgp_large_community then {
            ebgp_out_prepend(0 + w);
        } else {
            # Announce non-local and non-metro routes with our AS prepended 1 times
            ebgp_out_prepend(1 + w);
        }
    }
}

# ToDo: Remove communities outgoing
