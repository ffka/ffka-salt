# Reject routes that don't pass basic plausibility checks
function ebgp_in_filter_implausible() {
    if (net.len > 48) then {
        reject;
    }

    if (bgp_path.len > 100) then {
        print "Reject: Too long AS path: ", net, " ", bgp_path;
        reject;
    }
}

# reject bogons ASNs and prefixes
function ebgp_in_filter_bogons() {
    if (net ~ BOGON_PREFIXES) then {
        print "Reject: bogon prefix: ", net;
        reject;
    }

    if (bgp_path ~ BOGON_ASNS) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    return 1;
}

# Reject local routes from ebgp peers
function ebgp_in_filter_local_as() {
    if net ~ LOCAL_AS_PREFIXES then {
        print "Reject: own prefix", net, " ", bgp_path;
        reject;
    }
}

# Reject default route
function ebgp_in_filter_default() {
    if net ~ [
            ::/0,
            2000::/3,
            0.0.0.0/0
        ] then {
        reject;
    }
}

# For peering sessions, filter routes with tier 1 transits in the AS path
function ebgp_in_filter_tier1() {
    if (bgp_path ~ TRANSIT_ASNS) then {
        print "Reject: transit ASN in AS_PATH: ", net, " ", bgp_path;
        reject;
    }
}

function ebgp_in_weight(string peer_type)
int _lpref;
int _med;
bool _match;
{
    _match = false;
    if peer_type = "transit" then {
        _lpref = 500;
        _med = 0;
        _match = true;
    }
    if peer_type = "peer" then {
        _lpref = 1000;
        _med = 0;
        _match = true;
    }
    if peer_type = "backup-peer" then {
        _lpref = 1000;
        _med = 100;
        _match = true;
    }
    if peer_type = "route-server" then {
        _lpref = 1000;
        _med = 500;
        _match = true;
    }

    if _match = false then {
        _lpref = 0;
        _med = 1000;

        print "unknown peer type ", peer_type, " specified - setting local pref to 0 for ", net;
    }

    bgp_local_pref = _lpref;
    bgp_med = _med;
}

# Accept well-known graceful shutdown community
function honor_graceful_shutdown() {
    if CW_GRACEFUL_SHUTDOWN ~ bgp_community then {
        bgp_local_pref = 0;
    }
}

# Accept well-known graceful shutdown community
# First check if customer prefix (a /16 to /128) than check if BLACKHOLE bgp_community than do other shit, do not check if (/16 to /48)
function honor_blackhole_community() {
    if CW_BLACKHOLE ~ bgp_community then {
        print "Blackhole: route with blackhole community set: ", net, " ", bgp_path;
        dest = RTD_BLACKHOLE;

        # route blackholed -> accept
        accept;
    }
}
