{%- set metro = salt['pillar.get']('routing:router_metro') | upper %}
{% set location = salt['pillar.get']('routing:router_location') | upper %}

{%- for af in ['4', '6'] %}

{% set af_long = 'ipv' ~ af %}

{{ af_long }} table originate{{ af }};

protocol static originate_v{{ af }} {
    {{ af_long }} {
        table originate{{ af }};
    };

    # Global prefixes
    {%- for prefix in salt['pillar.get']('routing:prefixes:' ~ af_long ~ ':global', []) %}
    route {{ prefix }} unreachable;
    {% endfor %}

    # metro-local prefixes
    {%- for prefix in salt['pillar.get']('routing:prefixes:' ~ af_long ~ ':metro:' ~ metro, []) %}
    route {{ prefix }} unreachable;
    {% endfor %}

    # location-local prefixes
    {%- for prefix in salt['pillar.get']('routing:prefixes:' ~ af_long ~ ':location:' ~ location, []) %}
    route {{ prefix }} unreachable;
    {% endfor %}
}

protocol pipe originate_v{{ af }}_pipe {
    table originate{{ af }};
    peer table main{{ af }};
        export filter {
            ebgp_out_tag_location(LOCAL_LOCATION);
            ebgp_out_tag_metro(LOCAL_METRO);

            if net ~ [{{ salt['pillar.get']('routing:prefixes:' ~ af_long ~ ':global', []) | join(', ') }}] then {
                ebgp_out_tag_scope(CI_SCOPE_VALUE_GLOBAL);
            } else {
                # Maybe location_local is not really accurate
                ebgp_out_tag_scope(CI_SCOPE_VALUE_LOCATION_LOCAL);
            }

            ebgp_out_tag_originate();
            accept;
        };
        import none;
}

{% endfor %}
